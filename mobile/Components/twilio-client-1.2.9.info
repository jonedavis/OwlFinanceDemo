{"Name":"Twilio Client","Id":2756,"Alias":"twilio-client","Description":"Create rich communication experiences in your Xamarin.iOS and Xamarin.Android apps with [Twilio Client](http://twilio.com/client). The Twilio Client component makes it easy for you to add VoIP calling features to your app which enable it to call other mobile apps and traditional phones.\n\nTo learn more about Twilio, visit [http://twilio.com].\n\nThe following code shows some basic usage of the component. For more details, have a look at the Getting Started guide or the included Samples.\n\n## iOS\n\n```csharp\nusing TwilioClient;\n//...\nTCConnection connection;\nTCDevice device;\n\npublic override void ViewDidLoad ()\n{\n\t\t\t//  Request a client capability token. See the Getting Started guide for details on setting up the server code for the capability token.\n\t\t\tvar client = new HttpClient ();\n\t\t\tvar token = await client.GetStringAsync(\"*** capability token url ***\");\n\n\t\t\t// Create a Twilio Client Device passing in the capability token.\n\t\t\tdevice = new TCDevice (token, null);\n\t\t\t\n\t\t\t// Set up device events\n\t\t\tdevice.StartedListeningForIncomingConnections += delegate {\n\t\t\t}\n\t\t\tdevice.StoppedListeningForIncomingConnections += delegate {\n\t\t\t}\n\t\t\tdevice.ReceivedIncomingConnection += (sender, e) =\u003e {\n\t\t\t\tconnection = e.Connection;\n\t\t\t\t// Set up the connection\n\t\t\t\tif(connection != null)\n\t\t\t\t{\n\t\t\t\t\tconnection.Failed += delegate {\n\t\t\t\t\t\t// ...\n\t\t\t\t\t};\n\t\t\t\t\tconnection.StartedConnecting += delegate {\n\t\t\t\t\t\t// ...\n\t\t\t\t\t};\n\t\t\t\t\tconnection.Connected += delegate {\n\t\t\t\t\t\t// ...\n\t\t\t\t\t};\n\t\t\t\t\tconnection.Disconnected += delegate {\n\t\t\t\t\t\tconnection = null;\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t// Accept call (can also reject the call)\n\t\t\t\t\tconnection.Accept();\n\t\t\t\t}\n\t\t\t}\n}\n```\n\n## Android\n``` csharp\npublic class MainActivity : Activity, Twilio.IInitListener, IDeviceListener, IConnectionListener\n{\n\tpublic IConnection Connection {\n\t\tget;\n\t\tset;\n\t}\n\n\tpublic Device Device {\n\t\tget;\n\t\tset;\n\t}\n\n\tprotected override void OnCreate (Bundle bundle)\n\t{\n\t\t// ...\n\t\t\n\t\tTwilio.Initialize (this.ApplicationContext, this);\n\t\t\n\t\t// ...\n\t}\n\n\t#region Twilio.IInitListener\n\tpublic void OnInitialized ()\n\t{\n\t\tConsole.WriteLine (\"Twilio SDK is ready.\");\n\n\t\ttry {\n\t\t\tvar client = new HttpClient ();\n\t\t\tvar token = await client.GetStringAsync (*** capability token url ***);\n\n\t\t\tDevice = Twilio.CreateDevice(token, null);\n\n\t\t\tvar intent  = new Intent(context, typeof(MainActivity));\n\t\t\tvar pendingIntent = PendingIntent.GetActivity(context, 0, intent, PendingIntentFlags.UpdateCurrent);\n\n\t\t\tDevice.SetIncomingIntent(pendingIntent);\n\n\t\t\tDevice.SetDeviceListener(this);\n\n\t\t} catch (Exception ex) {\n\t\t\tConsole.WriteLine (\"Error: \" + ex.Message);\n\t\t}\n\t}\n\t#endregion\n\n\t// Set up Device events\n\t#region IDeviceListener\n\tpublic void OnPresenceChanged (Device device, PresenceEvent presenceEvent)\n\t{\n\t\t// ...\n\t}\n\n\tpublic void OnStartListening (Device device)\n\t{\n\t\t// ...\n\t}\n\n\tpublic void OnStopListening (Device device)\n\t{\n\t\t// ...\n\t}\n\n\tpublic void OnStopListeningWithError (Device device, int errorCode, string errorMessage)\n\t{\n\t\t// ...\n\t}\n\n\tpublic bool ReceivePresenceEvents (Device device)\n\t{\n\t\t// ...\n\t}\n\t#endregion\n\n\t// Set up Connection events\n\t#region IConnectionListener\n\tpublic void OnConnected (IConnection connection)\n\t{\n\t\t// ...\n\t}\n\n\tpublic void OnConnecting (IConnection connection)\n\t{\n\t\t// ...\n\t}\n\n\tpublic void OnDisconnected (IConnection connection)\n\t{\n\t\t// ...\n\t}\n\n\tpublic void OnDisconnectedWithError (IConnection connection, int errorCode, string errorMessage)\n\t{\n\t\t// ...\n\t}\n\t#endregion\n}\n```\n","Version":"1.2.9","Summary":"Official Twilio Client SDK for Xamarin. Twilio Client makes it easy for you to add VoIP features to your apps.","QuickStart":"[Twilio Client for Mobile](http://twilio.com/client/mobile) enables mobile developers to create VoIP applications on the iOS and Android platforms. Xamarin allows C#  developers to build native iOS and Android applications. By simply adding a few lines of code your application will be able to call any phone on the global telecom network as well as other Twilio Client apps running on the web, iOS or Android. The Twilio Client component will talk to the [Twilio](http://twilio.com) backend to handle presence updates and connect calls.\n\nTo make all of this work we will need some server code to generate [capability tokens](https://www.twilio.com/docs/client/capability-tokens). A capability token grants the client access to use your Twilio account to make outbound or accept incoming calls. Yes you read that correctly, the client application will be spending your precious Twilio credits. In your server application you\u0027ll probably want to validate users before granting them a token. You\u0027ll also want to consider limiting the amount of time the client can connect to Twilio so that you don\u0027t rack up huge charges.\n\n## Creating a Twilio Account\n\nTo use Twilio Client you\u0027ll need a Twilio account. Follow [this guide](http://devangel-board.appspot.com/tools/getstarted.html) to create an account.\n\n## Generating capability tokens in ASP.NET MVC\n\nWe\u0027ll need some server code to generate capability tokens. You can use whatever server technology you\u0027d like. This tutorial will use Visual Studio 2013 Update 2. Fire up Visual Studio and create a new ASP.NET Web Application named TwilioClientAzure and configure it to use the Empty Project template and include MVC and Azure deployment.\n\nInstall the `Twilio.Mvc` and `Twilio.Client` NuGet packages in your ASP.NET MVC app.\n\nNext, add a Controller to your ASP.NET MVC project that will serve up the capability tokens to your client application. Right-click on the project node and select `Add-\u003eController...`. Select `MVC 5 Controller - Empty` in the resulting dialog and then click `Add`. Name the controller `ClientController`. Add the following using statement to the top of the ClientController class:\n\n```csharp\nusing Twilio;\n```\nReplace the `Index()` method in the ClientController class with this:\n\n```csharp\n// GET: Client/Token?ClientName=foo\npublic ActionResult Token(string clientName = \"default\")\n{\n\t// Create a TwilioCapability object passing in our credentials.\n    var capability = new TwilioCapability(*** Your AccountSid ***, *** Your AuthToken ***);\n\n\t// Specify that this token allows receiving of incoming calls\n    capability.AllowClientIncoming(clientName);\n\n\t// Return the token as text\n    return Content(capability.GenerateToken());\n}\n```\n\nPublish your site to Azure and access http://your_azure_site_url/Client/Token. You should see a long string in the browser if it is working.\n\nIf you\u0027re only developing for Android, skip the next section.\n\n## Adding Twilio Client functionality on iOS\n\nAssuming you have an application already created and the Twilio Client component is added to it, add the `using` statement to your View Controller:\n\n```csharp\nusing TwilioClient.iOS;\n```\n\nAdd fields for a TCDevice and a TCConnection to the top of your View Controller above the constructor:\n\n```csharp\nTCDevice _device;\nTCConnection _connection;\n```\n\nEdit the ViewDidLoad method so that it contains the following code:\n\n```csharp\npublic async override void ViewDidLoad ()\n{\n\tbase.ViewDidLoad ();\n\n\t// Create an HTTPClient object and use it to fetch\n\t// a capability token from our site on Azure. By default this\n\t// will give us a client name of \u0027xamarin\u0027\n\tvar client = new HttpClient ();\n\tvar token = await client.GetStringAsync(\"http://your-Azure-site-URL/Client/Token\");\n\n\t// Create a new TCDevice object passing in the token.\n\t_device = new TCDevice (token, null);\n\n\t// Set up the event handlers for the device\n\tSetupDeviceEvents ();\n}\n```\n\nThis code gets a capability token for a client named \u0027xamarin\u0027 from the Azure site you set up earlier. Next, setup the event handler for an incoming call in the `SetupDeviceEvents` method. Add the following code to the view controller:\n\n```csharp\nvoid SetupDeviceEvents ()\n{\n\tif (_device != null)\n\t{\n\t\t// When a new connection comes in, store it and use it to accept the incoming call.\n\t\t_device.ReceivedIncomingConnection += (sender, e) =\u003e {\n\t\t\t_connection = e.Connection;\n\t\t\t_connection.Accept();\n\t\t};\n\t}\n}\n```\n\nIf you\u0027re not developing for Android, skip the next section.\n\n## Adding Twilio Client functionality on Android\n\nAssuming you have an application already created and the Twilio Client component is added to it we need to first add some permissions to `AndroidManifest.xml`. Open this file and check the following permissions:\n\n* AccessNetworkState\n* AccessWifiState\n* ModifyAudioSettings\n* RecordAudio\n\nIf you want to use the sounds that come with the Twilio Client Android SDK for incoming, outgoing and disconnect events you can get them from the sample included with the Twilio Client component. Add the `outgoing.wav`, `incoming.wav` and `disconnect.wav` files to the `Resources\\raw` directory of your application.\n\nAdd the following `\u003cservice\u003e` tag to the application tag in your `AndroidManifest.xml`\u0027s Source view to declare the TwilioClientService:\n\n```\n\u003cservice android:name=\"com.twilio.client.TwilioClientService\" android:exported=\"false\" /\u003e\n```\n\nAdd the folowing `using` statement to your Activity:\n\n```csharp\nusing TwilioClient.Android;\n```\n\nAdd fields for a Device and an IConnection to the top of your Activity:\n\n```csharp\nprivate Device _device;\nprivate IConnection _connection;\n```\n\nEdit the OnCreate method so that it contains the following code:\n\n```csharp\nprotected override void OnCreate (Bundle bundle)\n{\n    base.OnCreate (bundle);\n\n    // Set our view from the \"main\" layout resource\n    SetContentView (Resource.Layout.Main);\n\n    Twilio.Initialize (this.ApplicationContext, this);\n}\n```\nImplement the Twilio.IInitListener interface:\n\n```csharp\n#region IInitListener\npublic void OnError (Java.Lang.Exception p0)\n{\n    Log.Info (TAG, \"Error initializing Twilio.\");\n}\n\npublic async void OnInitialized ()\n{\n    try {\n        var clientName = \"xamarin\";\n\n        var client = new HttpClient ();\n        var token = await client.GetStringAsync (\"http://your-Azure-site-url/Client/Token?clientName=\" + clientName);\n\n        _device = Twilio.CreateDevice(token, null);\n\n        var intent  = new Intent(this.ApplicationContext, typeof(MainActivity));\n        var pendingIntent = PendingIntent.GetActivity(this.ApplicationContext, 0, intent, PendingIntentFlags.UpdateCurrent);\n\n        _device.SetIncomingIntent(pendingIntent);\n\n    } catch (Exception ex) {\n        Log.Info(TAG, \"Error: \" + ex.Message);\n    }\n}\n#endregion\n```\n\nAdd the following code that will handle incoming calls via the device\u0027s IncomingIntent to the activity:\n\n```csharp\nprotected override void OnNewIntent (Intent intent)\n{\n    base.OnNewIntent (intent);\n    this.Intent = intent;\n}\n\nprotected override void OnResume ()\n{\n    base.OnResume ();\n\n    var intent = this.Intent;\n    var device = intent.GetParcelableExtra(Device.ExtraDevice) as Device;\n    //var connection = intent.GetParcelableExtra(Device.ExtraConnection) as IConnection;\n    var connection = intent.GetParcelableExtra(Device.ExtraConnection).JavaCast\u003cIConnection\u003e();\n    if (device != null \u0026\u0026 connection != null) {\n        intent.RemoveExtra(Device.ExtraDevice);\n        intent.RemoveExtra(Device.ExtraConnection);\n        HandleIncomingConnection(device, connection);\n    }\n}\n\nvoid HandleIncomingConnection (Device device, IConnection connection)\n{\n    if (_connection != null)\n        _connection.Disconnect();\n    _connection = connection;\n    _connection.Accept();\n}\n```\n\nAt this point, the application is ready to receive incoming calls.\n\n## Responding to an incoming call\n\nHead back over to the ASP.NET MVC application and add the following using statements to ClientController.cs:\n\n```csharp\nusing Twilio.TwiML;\nusing Twilio.TwiML.Mvc;\n```\nNext, add the following method to the class:\n\n```csharp\n// /Client/CallXamarin\npublic ActionResult CallXamarin()\n{\n    var response = new TwilioResponse();\n    response.Dial(new Client(\"xamarin\"));\n    return new TwiMLResult(response);\n}\n```\n\nThis code produces TwiML that we will use to tell Twilio to connect us to the client. Publish your site to Azure so that the new endpoint will be available.\n\nGo to your [phone number list](https://www.twilio.com/user/account/phone-numbers/incoming) in your Twilio account and click on the number you created earlier. Underneath Voice where it says \"Request URL\" enter: http://your_azure_url/Client/CallXamarin and then click the red Save button at the bottom of the screen.\n\nHead back to Xamarin Studio and run your iPadPhone application in the iPad simulator or your Android application in the emulator of your choice. The app will get a capability token and then sit there ready for you to call it. Call your Twilio number using your normal voice phone. Twilio will connect you to the app running in the simulator/emulator and you should be able to hear yourself echoing through your computer speakers. You just turned your iPad/Android device into a phone! If our app could only receive incoming phone calls it wouldn\u0027t be much of a phone. Let\u0027s set up a few things to enable it to make outbound calls as well.\n\n## Creating a TwiML app\n\nWhen we update the capability token we send to the client we will need to provide the ID to a [TwiML application](https://www.twilio.com/user/account/apps).  A TwiML application has a few uses. One common use case is to allow a bunch of Twilio phone numbers to use the same Voice and SMS URLs, so you don’t have to copy/paste your server configuration in the website’s UI over and over again. The other use is handling outbound calls for Twilio Client apps.\n\nThe iPad/Android client will initiate an outbound call to a number the user enters into a text field when the user taps a button. The Voice URL of a TwiML app will be requested when this call is initiated to tell Twilio\u0027s backend how to handle the call. Twilio Client knows which TwiML application to use because we will generate the capability token with the unique identifier of a TwiML application. Let\u0027s create a TwiML application now which will use a Voice URL from our Azure application. [You can create a TwiML app here](https://www.twilio.com/user/account/apps/add).\n\nSet the Voice URL to: http://your-azure-url/Client/InitiateCall. Save your TwiML app and then click its name in the list. Copy the \"Sid\" property at the top of the screen to the clipboard. You\u0027ll need it in the next step.\n\n## Updating the server app to handle outgoing calls\n\nBack in the ASP.NET MVC app update the `Token()` method of your `ClientController` class to add the following line:\n\n```csharp\n// Replace \"AP*****\" with the TwiML app Sid you copied in the last step\ncapability.AllowClientOutgoing(\"AP********************************\");\n```\n\nTest your app and make sure the `/Client/Token` endpoint is still returning a token before moving on.\n\nNext, add the endpoint that we specified in our TwiML application\u0027s Voice URL. Add the following method to the class:\n\n```csharp\n// /Client/InitiateCall?source=5551231234\u0026target=5554561212\npublic ActionResult InitiateCall(string to, string from)\n{\n    var response = new TwilioResponse();\n\n    // Add a \u003cDial\u003e tag that specifies the callerId attribute\n    response.Dial(target, new { callerId = from });\n\n    return new TwiMLResult(response);\n}\n```\n\nPublish your server app to Azure before moving on.\n\nIf you are not developing for iOS, skip the next section.\n\n## Placing an outbound call from your iOS app\n\nThis code assumes you have a button named `callButton` that will initiate the call and a text field named `numberField` that is used for inputting a number to dial. Add the following code to the end of the ViewDidLoad method:\n\n```csharp\n// Add code to TouchUpInside to place the call when the user taps the button\ncallButton.TouchUpInside += (sender, e) =\u003e {\n\tvar parameters = new TCConnectionParameters {\n\t\tTo = numberField.Text\n\t}\n\n\t// Make the call\n\t_connection = _device.Connect(parameters, null);\n};\n```\n\nRun the iPadPhone app, enter a phone number in the text field and tap the button. You should hear some tones indicating Twilio Client is placing the call and then it will start ringing. You\u0027ve just turned your iPad into a phone!\n\n## Placing an outbound call from your Android app\n\nThis code assumes your layout includes a Button named `callButton` that will initiate the call and an EditText named `numberEditText` that is used for inputting a number to dial. Add the following code to your Activity\u0027s OnCreate method:\n\n```csharp\n// Get our button from the layout resource,\n// and attach an event to it\nButton callButton = FindViewById\u003cButton\u003e (Resource.Id.callButton);\nEditText numberEditText = FindViewById\u003cEditText\u003e (Resource.Id.numberEditText);\n\ncallButton.Click += delegate {\n    if(_connection != null \u0026\u0026 _connection.State == ConnectionState.Connected)\n    {\n        _connection.Disconnect();\n    }\n    else\n    {\n        MakeOutgoingCall(numberEditText.Text);\n    }\n};\n```\n\nAdd the MakeOutgoingCall method to your Activity:\n\n```csharp\nvoid MakeOutgoingCall (string target)\n{\n    var parameters = new Dictionary\u003cstring, string\u003e () {\n        { \"To\"},\n        { target}\n    };\n\n    _connection = _device.Connect (parameters, null);\n\n    if (_connection == null) {\n        Log.Info (TAG, \"Failed to create connection.\");\n    }\n}\n```\n\nRun the app, enter a phone number in the text field and tap the button. You should hear some tones indicating Twilio Client is placing the call and then it will start ringing. Your Android app is now a VoIP phone!\n\n## Other Resources\n\n* [Twilio](http://twilio.com)\n* [Twilio Client for Mobile](http://twilio.com/client/mobile)\n* [Twilio Client for iOS Bindings](https://github.com/brentschooley/twilio-client-xamarin)\n* Need help? Reach out to Brent Schooley on Twitter [@brentschooley](http://twitter.com/brentschooley)\n","Hash":"0368dbe2a2a674143550ed61d4fb5529","TargetPlatforms":["ios","android"],"TrialHash":null}