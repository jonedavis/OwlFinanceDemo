{"Name":"Twilio IP Messaging","Id":2710,"Alias":"twilio-ipm","Description":"Create chat experiences in your Xamarin.iOS and Xamarin.Android apps with [Twilio IP Messaging](http://twilio.com/ip-messaging). Twilio IP Messaging makes it easy for you to build a chat-powered app without the need to set up and scale a backend infrastructur.\n\nTo learn more about Twilio, visit [http://twilio.com].\n\nThe following code shows some basic usage of the component. For more details, have a look at the Getting Started guide or the included Samples.\n\n## iOS\n\n```csharp\nusing Twilio.Common;\nusing Twilio.IPMessaging;\n//...\nTwilioIPMessagingClient client;\nstring identity;\nChannel generalChannel;\nMessagesDataSource dataSource;\n\npublic override void ViewDidLoad ()\n{\n    var token = await GetToken();\n    this.NavigationItem.Prompt = $\"Logged in as {identity}\";\n    var accessManager = TwilioAccessManager.Create(token, this);\n    client = TwilioIPMessagingClient.Create(accessManager, this);\n\n    client.GetChannelsList((result, channels) =\u003e\n\t\t\t{\n\t\t\t\tgeneralChannel = channels.GetChannelWithUniqueName(\"general\");\n\n\t\t\t\tif (generalChannel != null)\n\t\t\t\t{\n\t\t\t\t\tgeneralChannel.Join(r =\u003e\n\t\t\t\t\t{\n\t\t\t\t\t\tConsole.WriteLine(\"successfully joined general channel!\");\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar options = new NSDictionary(\"TWMChannelOptionFriendlyName\", \"General Chat Channel\", \"TWMChannelOptionType\", 0);\n\n\t\t\t\t\tchannels.CreateChannel(options, (creationResult, channel) =\u003e\n\t\t\t\t\t{\n\t\t\t\t\t\tif (creationResult.IsSuccessful())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeneralChannel = channel;\n\t\t\t\t\t\t\tgeneralChannel.Join(r =\u003e\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeneralChannel.SetUniqueName(\"general\", res =\u003e { });\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t});\n\n    sendButton.TouchUpInside += (sender, e) {\n      var msg = generalChannel.Messages.CreateMessage(messageTextField.Text);\n      sendButton.Enabled = false;\n      generalChannel.Messages.SendMessage(msg, r =\u003e\n      {\n\n\t       BeginInvokeOnMainThread(() =\u003e\n\t        {\n\t\t          messageTextField.Text = string.Empty;\n\t\t            sendButton.Enabled = true;\n\t        });\n\n      });\n    };\n}\n\n[Foundation.Export(\"ipMessagingClient:channel:messageAdded:\")]\npublic void MessageAdded(TwilioIPMessagingClient client, Channel channel, Message message)\n{\n\tdataSource.AddMessage(message);\n\ttableView.ReloadData();\n\tif (dataSource.Messages.Count \u003e 0)\n\t{\n\t\tScrollToBottomMessage();\n\t}\n}\n\n\n```\n\n## Android\n``` csharp\nusing Twilio.Common;\nusing Twilio.IPMessaging;\n\npublic class MainActivity : Activity, IPMessagingClientListener, IChannelListener, ITwilioAccessManagerListener\n{\n    ITwilioIPMessagingClient client;\n    MessagesAdapter adapter;\n\t\tIChannel generalChannel;\n\n    protected async override void OnCreate(Bundle savedInstanceState)\n\t\t{\n      TwilioIPMessagingSDK.SetLogLevel((int)Android.Util.LogPriority.Debug);\n\n\t\t\tif (!TwilioIPMessagingSDK.IsInitialized)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(\"Initialize\");\n\n\t\t\t\tTwilioIPMessagingSDK.InitializeSDK(this, new InitListener\n\t\t\t\t{\n\t\t\t\t\tInitializedHandler = async delegate\n\t\t\t\t\t{\n\t\t\t\t\t\tawait Setup();\n\t\t\t\t\t},\n\t\t\t\t\tErrorHandler = err =\u003e\n\t\t\t\t\t{\n\t\t\t\t\t\tConsole.WriteLine(err.Message);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tawait Setup();\n\t\t\t}\n\n      sendButton.Click += (sender, e) =\u003e {\n        if (!string.IsNullOrWhiteSpace(textMessage.Text))\n        {\n        \tvar msg = generalChannel.Messages.CreateMessage(textMessage.Text);\n\n        \tgeneralChannel.Messages.SendMessage(msg, new StatusListener\n        \t{\n        \t\tSuccessHandler = () =\u003e\n        \t\t{\n        \t\t\tRunOnUiThread(() =\u003e\n        \t\t\t{\n        \t\t\t\ttextMessage.Text = string.Empty;\n        \t\t\t});\n        \t\t}\n        \t});\n        }\n      };\n    }\n\n    async Task Setup()\n    {\n    \tvar token = await GetIdentity();\n    \tvar accessManager = TwilioAccessManagerFactory.CreateAccessManager(token, this);\n    \tclient = TwilioIPMessagingSDK.CreateIPMessagingClientWithAccessManager(accessManager, this);\n\n    \tclient.Channels.LoadChannelsWithListener(new StatusListener\n    \t{\n    \t\tSuccessHandler = () =\u003e\n    \t\t{\n    \t\t\tgeneralChannel = client.Channels.GetChannelByUniqueName(\"general\");\n\n    \t\t\tif (generalChannel != null)\n    \t\t\t{\n    \t\t\t\tgeneralChannel.Listener = this;\n    \t\t\t\tJoinGeneralChannel();\n    \t\t\t}\n    \t\t\telse\n    \t\t\t{\n    \t\t\t\tCreateAndJoinGeneralChannel();\n    \t\t\t}\n    \t\t}\n    \t});\n    }\n\n    void JoinGeneralChannel()\n    {\n    \tgeneralChannel.Join(new StatusListener\n    \t{\n    \t\tSuccessHandler = () =\u003e\n    \t\t{\n    \t\t\tRunOnUiThread(() =\u003e\n    \t\t\t   Toast.MakeText(this, \"Joined general channel!\", ToastLength.Short).Show());\n    \t\t}\n    \t});\n    }\n\n    void CreateAndJoinGeneralChannel()\n    {\n    \tvar options = new Dictionary\u003cstring, Java.Lang.Object\u003e();\n    \toptions[\"friendlyName\"] = \"General Chat Channel\";\n    \toptions[\"ChannelType\"] = ChannelChannelType.ChannelTypePublic;\n    \tclient.Channels.CreateChannel(options, new CreateChannelListener\n    \t{\n    \t\tOnCreatedHandler = channel =\u003e\n    \t\t{\n    \t\t\tgeneralChannel = channel;\n    \t\t\tchannel.SetUniqueName(\"general\", new StatusListener\n    \t\t\t{\n    \t\t\t\tSuccessHandler = () =\u003e { Console.WriteLine(\"set unique name successfully!\"); }\n    \t\t\t});\n    \t\t\tthis.JoinGeneralChannel();\n    \t\t},\n    \t\tOnErrorHandler = () =\u003e { }\n    \t});\n    }\n}\n```\n","Version":"0.14","Summary":"Twilio IP Messaging makes it easy for you to add chat features into your mobile applications without building or scaling a real-time backend.","QuickStart":"[Twilio IP Messaging](http://twilio.com/ip-messaging) is a cross-platform SDK that makes it possible for developers to build chat applications on the iOS and Android platforms without worrying about creating and scaling a backend. With the Xamarin Component for Twilio IP Messaging you\u0027ll be able to quickly add text-based chat to your existing and new Xamarin applications.\n\n## Creating a Twilio Account\n\nTo use Twilio IP Messaging you\u0027ll need a Twilio account. Head over to [https://twilio.com/try-twilio](https://twilio.com/try-twilio) to create your free account before continuing with this guide.\n\n## Generating access tokens and testing the chat server\n\nTo make all of this work we will need some server code to generate access tokens. An access token tells Twilio who a chat user is and what they can and can\u0027t do within the IP Messaging service. You can find out more about access tokens [here](https://www.twilio.com/docs/api/ip-messaging/guides/identity).\n\nHead over to [this guide](https://github.com/TwilioDevEd/ipm-quickstart-csharp) and follow the instructions to get the ASP.NET version of our quickstart working on your machine. If you\u0027d like to use a different backend language, you can find a full list of quickstart servers [here](https://www.twilio.com/docs/api/ip-messaging/guides/quickstart-js).\n\nOnce you have it set up correctly, open it in your browser and you should be looking at a chat application. You\u0027ve been granted an access token by the server and assigned a random username. We\u0027ll use this same server infrastructure to request a token for our mobile application.\n\nAt this point you can use any of the included samples or continue on to build it yourself.\n\n## Adding Twilio IP Messaging functionality on iOS\n\nAssuming you have an application already created and the Twilio IP Messaging component is added to it, add the following `using` statements to a new View Controller in your application:\n\n```csharp\n// If you don\u0027t have these in your app\nusing System.Threading.Tasks;\nusing System.Net.Http;\nusing System.Json;\nusing System.Collections.Generic;\n\n// For IP Messaging\nusing Twilio.Common;\nusing Twilio.IPMessaging;\n```\nConfigure your view controller\u0027s storyboard to have a table view at the top for displaying messages and a `UITextField` and `UIButton` at the bottom for sending messages. In the view controller class, configure it so that it implements the following interfaces:\n\n```csharp\npublic partial class ViewController : UIViewController, ITwilioIPMessagingClientDelegate, IUITextFieldDelegate, ITwilioAccessManagerDelegate\n{\n  // ...\n}\n```\n\nSince this is a chat app and we\u0027ll be doing a lot of work with messages let\u0027s create a class that will help manage them for our table view. This class will be a subclass of `UITableViewSource` so that we can not only store our `Message` objects but also provide our table view with the methods it needs to render them.\n\nStart by adding the following class to the bottom of your view controller file:\n\n```csharp\nclass MessagesDataSource : UITableViewSource\n{\n\t\tpublic List\u003cMessage\u003e Messages { get; private set; } = new List\u003cMessage\u003e();\n}\n```\n\nWe\u0027ll need the ability to add messages to the list as they come in so let\u0027s add that to `MessagesDataSource`:\n\n```csharp\npublic void AddMessage (Message msg)\n{\n\t\tMessages.Add (msg);\n}\n```\n\nFinally, we need the `NumberOfSections`, `RowsInSection` and `GetCell` method overrides that configure our table view to display the messages. Add these to `MessagesDataSource`:\n\n```csharp\npublic override nint NumberOfSections(UITableView tableView)\n{\n\treturn 1;\n}\n\npublic override nint RowsInSection(UITableView tableView, nint section)\n{\n\treturn Messages.Count;\n}\n\npublic override UITableViewCell GetCell (UITableView tableView, Foundation.NSIndexPath indexPath)\n{\n    var message = Messages [indexPath.Row];\n\n    var cell = tableView.DequeueReusableCell (\"MessageCell\") as MessageCell;\n    cell.Message = message;\n    cell.SetNeedsUpdateConstraints ();\n    cell.UpdateConstraintsIfNeeded ();\n\n    return cell;\n}\n```\n\nYou might have noticed that we don\u0027t have a `MessageCell` object yet. Let\u0027s create that now. Create a new class called `MessageCell` and replace its code with the following:\n\n```csharp\nusing Foundation;\nusing System;\nusing System.CodeDom.Compiler;\nusing UIKit;\nusing Twilio.IPMessaging;\n\nnamespace \u003cYourNamespace\u003e\n{\n    partial class MessageCell : UITableViewCell\n    {\n        public MessageCell (IntPtr handle) : base (handle)\n        {\n        }\n\n        public Message Message { get; set; }\n\n        public override void LayoutSubviews ()\n        {\n            base.LayoutSubviews ();\n\n            authorLabel.Text = Message?.Author ?? \"\";\n            messageLabel.Text = Message?.Body ?? \"\";\n        }\n    }\n}\n```\n\nCreate a custom cell in your table view inside your app\u0027s storyboard and create two labels in it. Name them `authorLabel` and `messageLabel` and set the class and identifier for the cell to `MessageCell`. The table view is ready to go. Let\u0027s populate it. Back in `ViewDidLoad` of the view controller, create a `MessagesDataSource` object and set it as the table source. While we\u0027re here we\u0027ll also provide the table view with some row dimension information:\n\n```csharp\nMessagesDataSource dataSource;\n\npublic async override void ViewDidLoad ()\n{\n    base.ViewDidLoad ();\n    // Perform any additional setup after loading the view, typically from a nib.\n\n    dataSource = new MsgsDataSource ();\n    tableView.Source = dataSource;\n    tableView.RowHeight = UITableView.AutomaticDimension;\n    tableView.EstimatedRowHeight = 70;\n}\n```\n\nOur table view is ready to go, now we just need to connect to Twilio IP Messaging and load it up.\n\n## Connecting to Twilio IP Messaging\n\nFirst, add some instance variables to keep track of IP Messaging related things:\n\n```csharp\n// Our chat client\nTwilioIPMessagingClient twilio;\n// The channel we\u0027ll chat in\nChannel generalChannel;\n// Our username when we connect\nstring identity;\n```\n\nNow let\u0027s add a method that will fetch an access token from our server:\n\n```csharp\nasync Task\u003cstring\u003e GetToken ()\n{\n    var deviceId = UIDevice.CurrentDevice.IdentifierForVendor.AsString ();\n\n    var tokenEndpoint = $\"https://{{your server URL and port}}/token.php?device={deviceId}\";\n\n    var http = new HttpClient ();\n    var data = await http.GetStringAsync (tokenEndpoint);\n\n    var json = JsonObject.Parse (data);\n    // Set the identity for use later, this is our username\n\t  identity = json [\"identity\"]?.ToString ()?.Trim (\u0027\"\u0027);\n\n\t  return json[\"token\"]?.ToString ()?.Trim (\u0027\"\u0027);\n}\n```\n\nWe pass in the device ID as a unique identifier and we\u0027re returned a token that includes our identity. Excellent, now let\u0027s go back to `ViewDidLoad` and create the IP Messaging client using the token. Add the following code to `ViewDidLoad`:\n\n```csharp\nvar token = await GetToken ();\nvar accessManager = TwilioAccessManager.Create (token, this);\nclient = TwilioIPMessagingClient.Create (accessManager, this);\n```\n\nWe use the returned token to create a `TwilioAccessManager` and then use that to create an IP Messaging client. We set our view controller as the delegate so we can handle the various delegate methods the `TwilioIPMessagingClient` needs to function. Let\u0027s use the client to get a list of channels and either join the `general` channel if it already exists or create it if it doesn\u0027t:\n\n```csharp\nclient.GetChannelsList ((result, channels) =\u003e {\n    generalChannel = channels.GetChannelWithUniqueName (\"general\");\n\n\tif (generalChannel != null)\n\t{\n\t\tgeneralChannel.Join(r =\u003e\n\t\t{\n\t\t\tConsole.WriteLine(\"successfully joined general channel!\");\n\t\t});\n\t}\n\telse\n\t{\n\t\tvar options = new NSDictionary(\"TWMChannelOptionFriendlyName\", \"General Chat Channel\", \"TWMChannelOptionType\", 0);\n\n\t\tchannels.CreateChannel(options, (creationResult, channel) =\u003e {\n\t\t\tif (creationResult.IsSuccessful())\n\t\t\t{\n\t\t\t\tgeneralChannel = channel;\n\t\t\t\tgeneralChannel.Join(r =\u003e {\n\t\t\t\t\tgeneralChannel.SetUniqueName(\"general\", res =\u003e { });\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n});\n```\n\nAdd some code to handle the send button press to send a new message to the general channel:\n\n```csharp\npartial void ButtonSend_TouchUpInside (UIButton sender)\n{\n    var msg = generalChannel.Messages.CreateMessage (messageTextField.Text);\n    sendButton.Enabled = false;\n    generalChannel.Messages.SendMessage(msg, r =\u003e {\n\n        BeginInvokeOnMainThread (() =\u003e {\n            messageTextField.Text = string.Empty;\n            sendButton.Enabled = true;\n        });\n\n    });\n}\n```\n\nWhen a message is sent to the channel we\u0027ll write a method that handles the `ipMessagingClient:channel:messageAdded:` delegate method:\n\n```csharp\n[Foundation.Export(\"ipMessagingClient:channel:messageAdded:\")]\npublic void MessageAdded(TwilioIPMessagingClient client, Channel channel, Message message)\n{\n\tdataSource.AddMessage(message);\n\ttableView.ReloadData();\n\tif (dataSource.Messages.Count \u003e 0)\n\t{\n\t\tScrollToBottomMessage();\n\t}\n}\n```\n\nWith this in place we can send and receive messages on the general channel and have a functioning chat app in iOS! Explore some of the other samples as well as the [Twiliio Docs](http://twilio.com/docs/api/ip-messaging) to find out what else you can do with your application.\n\n## Adding Twilio IP Messaging functionality on Android\n\nAssuming you have an application already created and the Twilio IP Messaging component is added to it, add the following `using` statements to a new Activity in your application:\n\n```csharp\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing Twilio.IPMessaging;\nusing Twilio.IPMessaging.Impl;\n```\n\nYou\u0027ll need to set up the layout for the `Activity` to include a `ListView`, an `EditText` and a `Button`. Here\u0027s a sample you can use:\n\n```xml\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\u003e\n    \u003cListView\n        android:minWidth=\"25px\"\n        android:minHeight=\"40dp\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:id=\"@+id/listView\"\n        android:layout_weight=\"1\" /\u003e\n    \u003cLinearLayout\n        android:orientation=\"horizontal\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:id=\"@+id/linearLayout1\"\u003e\n        \u003cEditText\n            android:inputType=\"textMultiLine\"\n            android:minHeight=\"30dp\"\n            android:id=\"@+id/messageTextField\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"match_parent\"\n            android:layout_weight=\"1\" /\u003e\n        \u003cButton\n            android:text=\"SEND\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"match_parent\"\n            android:id=\"@+id/sendButton\"\n            android:gravity=\"center\" /\u003e\n    \u003c/LinearLayout\u003e\n\u003c/LinearLayout\u003e\n```\n\nYou\u0027ll also need a layout for the individual chat messages in the `ListView`. Create `MessageItemLayout.axml` in your layout resources folder and give it the following XML:\n\n```xml\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:padding=\"8dp\"\u003e\n    \u003cTextView\n        android:text=\"Medium Text\"\n        android:textAppearance=\"?android:attr/textAppearanceMedium\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:id=\"@+id/messageTextView\"\n        android:layout_marginLeft=\"8dp\"\n        android:layout_marginRight=\"8dp\" /\u003e\n    \u003cTextView\n        android:text=\"NAMEOFTHEUSER\"\n        android:textAppearance=\"?android:attr/textAppearanceSmall\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/authorTextView\"\n        android:textStyle=\"italic\"\n        android:layout_marginLeft=\"8dp\"\n        android:layout_marginRight=\"8dp\" /\u003e\n\u003c/LinearLayout\u003e\n```\n\nIn your Activity\u0027s C# file add some interfaces and set up the `Activity` attribute:\n\n```csharp\n[Activity (Label = \"#general\", MainLauncher = true, Icon = \"@mipmap/icon\")]\npublic class MainActivity : Activity, IPMessagingClientListener, IChannelListener, ITwilioAccessManagerListener\n{\n  // ...\n}\n```\nRight-click and implement the `IChannelListener` and `ITwilioAccessManagerListener` interfaces.\n\nNext we\u0027ll add some instance variables we\u0027ll use in the application to the top of the activity:\n\n```csharp\ninternal const string TAG = \"TWILIO\";\n\nButton sendButton;\nEditText textMessage;\nListView listView;\nMessagesAdapter adapter;\n\nITwilioIPMessagingClient client;\nIChannel generalChannel;  \n```\n\nWe\u0027re going to need an `Adapter` to manage the messages we\u0027ll be displaying and creating in the chat application. This class will work with the `ListView` we created earlier to display the chat messages:\n\n```csharp\nclass MessagesAdapter : BaseAdapter\u003cIMessage\u003e\n{\n    public MessagesAdapter (Activity parentActivity)\n    {\n        activity = parentActivity;\n    }\n\n    List\u003cIMessage\u003e messages = new List\u003cIMessage\u003e ();\n    Activity activity;\n}\n```\n\nWe\u0027ll need a method in the `MessagesAdapter` to add messages we send from the app. Let\u0027s add that:\n\n```csharp\npublic void AddMessage (IMessage msg)\n{\n    lock (messages) {\n        messages.Add (msg);\n    }\n\n    activity.RunOnUiThread (() =\u003e\n        NotifyDataSetChanged ());\n}\n```\n\nFinally, we need the adapter methods that make it possible for the `ListView` to display the messages. We\u0027ll add those now:\n\n```csharp\npublic override long GetItemId (int position)\n{\n    return position;\n}\n\npublic override Android.Views.View GetView (int position, Android.Views.View convertView, Android.Views.ViewGroup parent)\n{\n    var view = convertView as LinearLayout ?? activity.LayoutInflater.Inflate (Resource.Layout.MessageItemLayout, null) as LinearLayout;\n    var msg = messages [position];\n\n    // Update the text in the TextViews in the layout\n    view.FindViewById\u003cTextView\u003e (Resource.Id.authorTextView).Text = msg.Author;\n    view.FindViewById\u003cTextView\u003e (Resource.Id.messageTextView).Text = msg.MessageBody;\n\n    return view;\n}\n\npublic override int Count { get { return messages.Count; } }\npublic override IMessage this [int index] { get { return messages [index]; } }\n```\n\nNow we\u0027ll set up our user interface in `OnCreate()`:\n\n```csharp\nprotected async override void OnCreate (Bundle savedInstanceState)\n{\n    base.OnCreate (savedInstanceState);\n\n\t  this.ActionBar.Subtitle = \"logging in...\";\n\n    // Set our view from the \"main\" layout resource\n    SetContentView (Resource.Layout.Main);\n\n    sendButton = FindViewById\u003cButton\u003e (Resource.Id.sendButton);\n    textMessage = FindViewById\u003cEditText\u003e (Resource.Id.messageTextField);\n    listView = FindViewById\u003cListView\u003e (Resource.Id.listView);\n\n    adapter = new MessagesAdapter (this);\n    listView.Adapter = adapter;\n}\n```\n\n## Connecting to Twilio IP Messaging\n\nAdd the following code to `OnCreate` to initialize the Twilio IP Messaging SDK:\n\n```csharp\nTwilioIPMessagingSDK.SetLogLevel ((int)Android.Util.LogPriority.Debug);\n\nif (!TwilioIPMessagingSDK.IsInitialized) {\n    Console.WriteLine (\"Initialize\");\n\n    TwilioIPMessagingSDK.InitializeSDK (this, new InitListener {\n        InitializedHandler = async delegate {\n            await Setup ();\n        },\n        ErrorHandler = err =\u003e {\n            Console.WriteLine (err.Message);\n        }\n    });\n} else {\n    await Setup ();\n}\n```\n\nOnce initialized, the `Setup()` method will get called so let\u0027s create that method now:\n\n```csharp\nasync Task Setup ()\n{\n  var token = await GetIdentity ();\n\tvar accessManager = TwilioAccessManagerFactory.CreateAccessManager(token, this);\n\tclient = TwilioIPMessagingSDK.CreateIPMessagingClientWithAccessManager(accessManager, this);\n\n\tclient.Channels.LoadChannelsWithListener (new StatusListener\n\t{\n        SuccessHandler = () =\u003e\n\t\t{\n\t\t\tgeneralChannel = client.Channels.GetChannelByUniqueName(\"general\");\n\n\t\t\tif (generalChannel != null)\n\t\t\t{\n\t\t\t\tgeneralChannel.Listener = this;\n\t\t\t\tJoinGeneralChannel();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tCreateAndJoinGeneralChannel();\n\t\t\t}\n\t\t}\n    });\n}\n```\n\nThis method does a lot so let\u0027s break down what it does step by step.\n\n1. A token is fetched using the `GetIdentity` (we will create this in the next step)\n2. An access manager is created using the token.\n3. The SDK is used to create an IP Messaging client object that we can use to interface with Twilio IP Messaging.\n4. The list of channels is requested and when successful we check if there\u0027s a a channel with the unique name \"general\".\n5. If there is, we join it. If there isn\u0027t we create it and then join it.\n\nLet\u0027s add the methods we\u0027re missing. First we need the `GetIdentity` method:\n\n```csharp\nasync Task\u003cstring\u003e GetIdentity ()\n{\n    var androidId = Android.Provider.Settings.Secure.GetString (ContentResolver,\n                        Android.Provider.Settings.Secure.AndroidId);\n\n    var tokenEndpoint = $\"https://{{your token server URL from above}}/token.php?device={androidId}\";\n\n    var http = new HttpClient ();\n    var data = await http.GetStringAsync (tokenEndpoint);\n\n    var json = System.Json.JsonObject.Parse (data);\n\n    var identity = json[\"identity\"]?.ToString ()?.Trim (\u0027\"\u0027);\n\t  this.ActionBar.Subtitle = $\"Logged in as {identity}\";\n    var token = json[\"token\"]?.ToString ()?.Trim (\u0027\"\u0027);\n\n    return token;\n}\n```\n\nNext we need the `JoinGeneralChannel` method:\n\n```csharp\nvoid JoinGeneralChannel()\n{\n\tgeneralChannel.Join(new StatusListener\n\t{\n\t\tSuccessHandler = () =\u003e\n\t\t{\n\t\t\tRunOnUiThread(() =\u003e\n\t\t\t   Toast.MakeText(this, \"Joined general channel!\", ToastLength.Short).Show());\n\t\t}\n\t});\n}\n```\n\nAnd finally the `CreateAndJoinGeneralChannel` method:\n\n```csharp\nvoid CreateAndJoinGeneralChannel()\n{\n\tvar options = new Dictionary\u003cstring, Java.Lang.Object\u003e();\n\toptions[\"friendlyName\"] = \"General Chat Channel\";\n\toptions[\"ChannelType\"] = ChannelChannelType.ChannelTypePublic;\n\tclient.Channels.CreateChannel(options, new CreateChannelListener\n\t{\n\t\tOnCreatedHandler = channel =\u003e\n\t\t{\n\t\t\tgeneralChannel = channel;\n\t\t\tchannel.SetUniqueName(\"general\", new StatusListener {\n\t\t\t\tSuccessHandler = () =\u003e { Console.WriteLine(\"set unique name successfully!\"); }\n\t\t\t});\n\t\t\tthis.JoinGeneralChannel();\n\t\t},\n\t\tOnErrorHandler = () =\u003e { }\n\t});\n}\n```\n\nAt this point you should be able to run the app and connect to the chat instance but you won\u0027t yet be able to send any messages. Add the following code to `OnCreate` to handle clicking the send button:\n\n```csharp\nsendButton.Click += (sender, e) =\u003e {\n\tif (!string.IsNullOrWhiteSpace(textMessage.Text))\n\t{\n\t\tvar msg = generalChannel.Messages.CreateMessage(textMessage.Text);\n\n\t\tgeneralChannel.Messages.SendMessage(msg, new StatusListener\n\t\t{\n\t\t\tSuccessHandler = () =\u003e\n\t\t\t{\n\t\t\t\tRunOnUiThread(() =\u003e\n\t\t\t\t{\n\t\t\t\t\ttextMessage.Text = string.Empty;\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n};\n```\n\nFinally, to handle incoming messages to the channel we need to add the `OnMessageAdd` function from `IChannelListener` to our `Activity`:\n\n```csharp\npublic void OnMessageAdd (IMessage message)\n{\n    adapter.AddMessage (message);\n    listView.SmoothScrollToPosition (adapter.Count - 1);\n}\n```\n\nWith all of this in place you\u0027ve done it, you\u0027ve created a chat app using Android and Twilio IP Messaging! Explore some of the other samples as well as the [Twiliio Docs](http://twilio.com/docs/api/ip-messaging) to find out what else you can do with your application.\n\n## Other Resources\n\n* [Twilio](http://twilio.com)\n* [Twilio IP Messaging](http://twilio.com/ip-messaging)\n* [Twilio IP Messaging Docs](http://twilio.com/docs/api/ip-messaging)\n* Need help? Reach out to Brent Schooley on Twitter [@brentschooley](http://twitter.com/brentschooley)\n","Hash":"f90da0d6d7702160873eb8555449f52f","TargetPlatforms":["ios","android"],"TrialHash":null}